Absolutely üëç ‚Äî here‚Äôs a clean, reusable Java helper class you can drop straight into your Azure Function project.

It builds a Datadog-friendly JSON log line, automatically fills missing fields with "" (empty string) or "N/A" (if you prefer), and formats the timestamp in your local timezone.

‚∏ª

‚úÖ LogHelper.java

package com.example.logging;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;

import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Map;

public class LogHelper {

    private static final ObjectMapper mapper = new ObjectMapper();

    // Format example: 2025-10-25T21:34:56.789+09:00
    private static final DateTimeFormatter formatter =
            DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSSXXX");

    /**
     * Creates a Datadog-friendly JSON string for logging.
     *
     * @param level      info|warn|error (for Datadog color)
     * @param message    log message
     * @param values     optional map of extra fields (component, functionName, etc.)
     * @return JSON string ready for log.info()
     */
    public static String createLog(String level, String message, Map<String, Object> values) {
        ObjectNode root = mapper.createObjectNode();

        // Standard Datadog fields
        root.put("timestamp", ZonedDateTime.now().format(formatter));
        root.put("status", safe(level));   // Datadog color level
        root.put("message", safe(message));
        root.put("service", envOrDefault("DD_SERVICE", "notification-platform"));
        root.put("env", envOrDefault("DD_ENV", "dev"));
        root.put("version", envOrDefault("DD_VERSION", "local"));

        // Optional fields (your structure)
        if (values != null) {
            for (Map.Entry<String, Object> entry : values.entrySet()) {
                String key = entry.getKey();
                Object val = entry.getValue();
                root.put(key, val == null ? "" : val.toString());
            }
        }

        return root.toString();
    }

    private static String safe(String s) {
        return (s == null) ? "" : s;
    }

    private static String envOrDefault(String name, String def) {
        String v = System.getenv(name);
        return v != null ? v : def;
    }
}


‚∏ª

‚úÖ How to use it in your triggers

import com.example.logging.LogHelper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.Map;

public class MyFunctions {
    private static final Logger log = LoggerFactory.getLogger(MyFunctions.class);

    public void cosmosTriggerHandler() {
        Map<String, Object> data = Map.of(
            "component", "cosmosTrigger",
            "functionName", "CosmosChangeFeedFn",
            "execution_status", "success",
            "agentId", "A123",
            "docId", "D456",
            "correlationId", "corr-001"
        );

        log.info(LogHelper.createLog("info", "Processed change feed successfully", data));
    }

    public void serviceBusHandler() {
        Map<String, Object> data = Map.of(
            "component", "serviceBusTrigger",
            "functionName", "ServiceBusFn",
            "execution_status", "failed",
            "errorMessage", "Timeout while sending email"
        );

        log.error(LogHelper.createLog("error", "Service Bus message failed", data));
    }
}


‚∏ª

üß© Output example (local time, Datadog-friendly)

{
  "timestamp": "2025-10-25T21:34:56.789+09:00",
  "status": "info",
  "message": "Processed change feed successfully",
  "service": "notification-platform",
  "env": "dev",
  "version": "local",
  "component": "cosmosTrigger",
  "functionName": "CosmosChangeFeedFn",
  "execution_status": "success",
  "agentId": "A123",
  "docId": "D456",
  "correlationId": "corr-001"
}


‚∏ª

üí° Notes
	‚Ä¢	If any field is null or missing ‚Üí it becomes "" (empty string).
	‚Ä¢	You can change the default behavior easily ("N/A" instead of empty string).
	‚Ä¢	Datadog will auto-parse timestamp, status, message, service, etc.
	‚Ä¢	You can safely call this helper from any trigger (Cosmos DB, Service Bus, Queue, HTTP).

‚∏ª

Would you like me to modify it so that it automatically detects which trigger it came from (e.g., reads ExecutionContext.getFunctionName() to fill functionName and component automatically)?