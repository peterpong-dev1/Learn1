public static boolean evaluate(EventConfig.Event evt,
                               boolean isCreate,
                               ObjectNode newDoc,
                               ObjectNode baseline,
                               List<ChangeInfo> deltas) {

    // honor "when": ["insert","update"]
    if (isCreate && !evt.allowInsert()) return false;
    if (!isCreate && !evt.allowUpdate()) return false;

    // On create there is no delta index
    Map<String, ChangeInfo> idx = isCreate ? Collections.emptyMap()
                                           : indexByFieldPath(deltas);

    boolean hasAny = false;
    boolean allOk  = true;

    for (EventConfig.Rule r : evt.getConditions().getRules()) {
        boolean hit = evalRule(r, isCreate, newDoc, baseline, idx);
        hasAny = hasAny || hit;
        allOk  = allOk  && hit;
        if (evt.getConditions().isOr()  &&  hit) return true;   // OR short-circuit
        if (evt.getConditions().isAnd() && !hit) return false;  // AND short-circuit
    }

    // no rules => no match
    return evt.getConditions().isAnd() ? allOk : hasAny;
}

private static boolean evalRule(EventConfig.Rule r,
                                boolean isCreate,
                                ObjectNode newDoc,
                                ObjectNode baseline,
                                Map<String, ChangeInfo> idx) {

    final String op   = safe(r.getOp());
    final String path = safe(r.getField());

    switch (op) {
        case "changed":
            // On create we usually DON'T treat “changed” as true for everything
            return isCreate ? false : changed(idx.get(path));

        case "changedTo":
            // On create, allow if current value equals requested AND it is present
            if (isCreate) return present(newDoc.at(jsonPointer(path)))
                                && r.getValue() != null
                                && r.getValue().equals(newDoc.at(jsonPointer(path)).asText());
            return changedTo(idx.get(path), r.getValue());

        case "becameNotNull":
            // True on create if field is present now
            return becameNotNull(isCreate, path, newDoc, baseline, idx.get(path));

        case "becameNull":
            // On create nothing “became null”
            return isCreate ? false : becameNull(isCreate, path, newDoc, baseline, idx.get(path));

        case "eq":
            return equalsNow(path, newDoc, r.getValue());

        case "equalsOrChangedTo":
            return isCreate
                    ? equalsNow(path, newDoc, r.getValue())
                    : equalsOrChangedTo(isCreate, r.getField(), newDoc, idx.get(r.getField()), r.getValue());

        case "ne":
            return !equalsNow(path, newDoc, r.getValue());

        case "eqDate":
            return eqDate(path, newDoc, r.getValue());

        default:
            return false;
    }
}

====

Got it. For the create case you can’t rely on deltas, so you must evaluate the current value in newDoc.
For your rule “lapseDate is null”, add a rule that checks the current value is absent/null.

Option A (add an explicit op)

Config

"conditions": {
  "logic": "AND",
  "rules": [
    { "op": "isNull", "field": "/lapseDate" }   // works on create & update
  ]
}

Code (in evalRule)

case "isNull": {
  JsonNode v = newDoc.at(jsonPointer(path));
  return v == null || v.isMissingNode() || v.isNull() ||
         (v.isTextual() && v.asText().isBlank());
}

Option B (reuse your equalsNow)

Allow equalsNow to accept null as the expected value.

Config

"conditions": {
  "logic": "AND",
  "rules": [
    { "op": "eq", "field": "/lapseDate", "value": null }
  ]
}

Code (adjust equalsNow)

private static boolean equalsNow(String path, ObjectNode doc, String expected) {
  JsonNode v = doc.at(jsonPointer(path));
  if (expected == null) {                     // treat “is null”
    return v == null || v.isMissingNode() || v.isNull()
        || (v.isTextual() && v.asText().isBlank());
  }
  if (v == null || v.isMissingNode() || v.isNull()) return false;
  return expected.equals(v.asText());
}

Either approach makes the rule fire on create when /lapseDate is null/absent (and will also work on updates). No changes needed to your delta logic for this case.